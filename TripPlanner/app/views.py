from django.shortcuts import render
from django.http import JsonResponse
from rest_framework.views import APIView
import requests
import os
from . import gmaps_api_call
from . import chatgpt_api_call
from . import routes_api_call
from . import path
from pathlib import Path
from dotenv import load_dotenv
from collections import defaultdict
import json
from django.http import JsonResponse
from datetime import datetime
from . import wikipediaPhotos

def get_locations(request):
    if request.method == 'GET':
        try:
            locationVals = request.GET.getlist('locations[]')
            print(f"locationvals is {locationVals} request.GET is {request.GET}")
            locations = {'locations' : locationVals}
            return JsonResponse(locations)
        except Exception as e:
            print('Error')
            return JsonResponse({'status': 'error', 'message': str(e)})

def get_dates(request):
    if request.method == 'GET':
        try:
            start_date_str = request.GET.get('start_date')
            end_date_str = request.GET.get('end_date')

            start_date = datetime.strptime(start_date_str, '%d/%m/%Y')
            end_date = datetime.strptime(end_date_str, '%d/%m/%Y')

            total_days = end_date - start_date + 1 # inclusive of start & end dates

            return JsonResponse({'start_date': start_date, 'end_date': end_date, 'total_days': total_days})

        except Exception as e:
            print('Error: unable to get dates')
            return JsonResponse({'status': 'error', 'message': str(e)})

def index(request):
    BASE_DIR = Path(__file__).resolve().parent.parent
    load_dotenv(os.path.join(BASE_DIR.parent.absolute(), '.env'))

    context = {}
    context['gmaps_api_key'] = os.getenv('GMAPS_PUBLIC_KEY')

    return render(request, 'index.html', context=context)

#"""
def generate_itinerary(request):
    if request.method == "POST":
        city = request.POST['data']
    GetPlaceID.get(request)

#"""

class GetPlaceID(APIView):
    """
    View to get place ID from Google Maps Places API.
    """

    def get(self, request, format=None):
        location = request.GET.get('location', '')
        startDate = request.GET.get('start-date', '').replace("-","/")
        endDate = request.GET.get('end-date', '').replace("-","/")
        num_days = 1
        if startDate and endDate:
            startDate = datetime.strptime(startDate, '%Y/%m/%d')
            endDate = datetime.strptime(endDate, '%Y/%m/%d')
            num_days = abs(endDate.toordinal() - startDate.toordinal()) + 1
        
        location_prefs = request.GET.get('location-prefs', '')

        num_location_prefs = location_prefs.count("[")
        # generate attractions list from ChatGPTs
        generated_text = chatgpt_api_call.city_chatgpt_request(location, num_days, location_prefs)
        list_of_attractions = []

        # check if there are location preferences 
        if location_prefs != "[]":
            list_of_attractions = location_prefs.replace('[',"").replace(']',"").split(', ')
            skip_by = len(list_of_attractions)//num_location_prefs
            list_of_attractions = [list_of_attractions[i] for i in range(0,len(list_of_attractions),skip_by)]

        # split location preferences, getting rid of city, state, and country
        generated_list = generated_text.strip().split("\n")
        # Don't add generated list TODO
        list_of_attractions += generated_list

        list_of_all_dicts = []
        lat_long_list = []
        lat_long_dict = defaultdict(int)

        # processing items in list to take out random numbers or bullet points generated by ChatGPT
        for i, attraction in enumerate(list_of_attractions):
            if attraction.startswith("- "):
                list_of_attractions[i] = attraction[2:]
            elif attraction.startswith("-"):
                list_of_attractions[i] = attraction[1:]
            elif attraction[0] in "1234567890" and (attraction[1:3] == '. ' or attraction[2:4] == '. '):
                list_of_attractions[i] = attraction[attraction.index(" ") + 1:]
        # remove duplicates while keeping order
        no_dup_act_list = []
        [no_dup_act_list.append(act) for act in list_of_attractions if act not in no_dup_act_list] 

        no_dup_act_list = no_dup_act_list[:num_days * 3]

        print(f"num_days: {num_days}")
        print(f"len(list_of_attractions): {len(list_of_attractions)}")

        # get latitude and longitude from GMAPS API
        counter = 0
        for attraction in no_dup_act_list:
            gmaps_info_tuple = gmaps_api_call.single_gmap_request(attraction, location)
            place_id, lat_long, photos, editorial_summary = gmaps_info_tuple
            if editorial_summary == "":
                editorial_summary = chatgpt_api_call.attraction_desc(attraction)
            if place_id is None or lat_long is None:
                continue
            info_dict = {'name': attraction,
                            'place_id': place_id,
                            'lat': lat_long[0],
                            'lng': lat_long[1],
                            'photo_info': photos,
                            'editorial_summary': editorial_summary}
            list_of_all_dicts.append(info_dict)
            lat_long_list.append(lat_long)

            lat_long_dict[lat_long] = counter
            counter += 1 

        midpoint = path.find_midpoint(lat_long_list)

        # pass latitude and longitudes into path function 
        ordered_activities = path.get_best_overall_path(num_days,lat_long_list,midpoint)
        
        list_all_days = []
        for day, output in enumerate(ordered_activities):
            permutation = []
            for activity in output:
                lat_long_tuple = (activity[0],activity[1])
                permutation.append(lat_long_dict[lat_long_tuple])
            list_all_days.append([list_of_all_dicts[i] for i in permutation])

        routes_list = []
        for day in list_all_days:
            lat_long_list = []
            for activity in day:
                lat_long_list.append((activity['lat'],activity['lng']))
            routes_list.append(routes_api_call.get_dist_and_time(lat_long_list))

        cityPhoto = wikipediaPhotos.getCityPhoto(location)
        countryFlag = wikipediaPhotos.getCountryFlag(location)

        photos = {'cityPhoto': cityPhoto, 'countryFlag': countryFlag}

        # pass this ordered list to the front-end
        mid_acts_routes_list = {'midpoint' : midpoint,
                                        'locations_info_list' : list_all_days,
                                        'route_info': routes_list,
                                        'photos': photos}
        return JsonResponse(mid_acts_routes_list)
